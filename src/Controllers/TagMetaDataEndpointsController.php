<?php
/*
 * SMARTCOSMOSProfilesLib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 12/18/2015
 */

namespace SMARTCOSMOSProfilesLib\Controllers;

use SMARTCOSMOSProfilesLib\APIException;
use SMARTCOSMOSProfilesLib\APIHelper;
use SMARTCOSMOSProfilesLib\Configuration;
use Unirest\Unirest;
class TagMetadataEndpointsController {

    /* private fields for configuration */

    /**
     * The username to use with basic authentication 
     * @var string
     */
    private $basicAuthUserName;

    /**
     * The password to use with basic authentication 
     * @var string
     */
    private $basicAuthPassword;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($basicAuthUserName, $basicAuthPassword)
    {
        $this->basicAuthUserName = $basicAuthUserName ? $basicAuthUserName : Configuration::$basicAuthUserName;
        $this->basicAuthPassword = $basicAuthPassword ? $basicAuthPassword : Configuration::$basicAuthPassword;
    }

    /**
     * ### Idempotent Behaviour
     * This endpoint is idempotent and will respond with an appropriate HTTP status code to indicate the actual result
     * - **200 OK** minimum 1 tag found and result available
     * - **400 BAD_REQUEST** problem occurred, check message parameter for detailed information
     * - **401 UNAUTHORIZED** user not authorized
     * ### Input HTTP Headers:
     * - HTTP Basic Authorization (as specified above)
     * ### Input parameters
     * - tagIds (required, array of string, `E12345678912345678`) ... Array of RFID tag identifiers; max 1000 entries allowed
     * - verificationTypes (optional, array of string, `RR`) ... Array of verification types
     * - properties (optional, array of string, `plantId,batchId`) ... Array of requested properties
     * <!--
     * - materialPerformance (optional, array of string, `air,carton`) ... Array of requested material performance data
     * -->
     * ### Available tag properties
     * Property ID | Data Type | Description | Availability
     * ------------ | ------------- | ------------ | ------------
     * custId | String | Customer ID | available
     * orderId | String | Order ID | available
     * orderDate | Long | Order date | available
     * orderQty | Number | Order quantity | available
     * orderQtyU | String | Order quantity unit | available
     * customerPO | String | Customer purchase order number | available
     * supplPO | String | Supplier purchase order number | available
     * delivId | String | Delivery ID | available
     * delivDate | Long | Delivery date | available
     * delivQty | Number | Delivery quantity | available
     * delivQtyU | String | Delivery quantity unit | available
     * batchId | String | Roll number / batch ID | available
     * yield | Number | Batch yield [%] | available
     * subRoll | String | Sub roll number / sub batch ID | available
     * plantId | String | Manufacturer production side ID | available
     * chipManuf | String | Chip manufacturer | available
     * chipModel | String | Chip model | available
     * inlayType | String | Inlay type | available
     * inlayManufDate | Long | Inlay manufacturer date | available
     * attenuation | Number | Attenuation in dB | available
     * checkState | Number | 0=failed; 1=passed (default) | available
     * <!--
     * ### Available tag performance properties
     * Property ID | Data Type | Description | Availability
     * ------------ | ------------- | ------------ | ------------
     * rrAvg | Number | Read range average [m] | LATER
     * rrAvgStdDev | Number | Read range average standard deviation [m] | LATER
     * rrMean | Number | Read range mean [m] | LATER
     * rrMeanStdDevPos | Number | Read range mean standard deviation positive [m] | LATER
     * rrMeanStdDevNeg | Number | Read range mean standard deviation negative [m] | LATER
     * grading | String | Grading class | LATER
     * -->
     * Notes:
     *  - Only available properties can be requested (check `Availability` column above)
     *  - Same data is not available for all tags/batches
     *  - There are additional properties planned in the future
     * ### Output parameters
     * - code (Number, `0`) ... Indicates the result code of this call (see `result codes`)
     * - tagId according the requested `tagIds`
     * - tagCode (Number, `0`) ... Indicates if the result code for this tag (see `result codes for a tag actions`)
     * - verificationState according the requested `verificationTypes`
     * - properties according the requested `properties`
     * <!--
     * - material performance according the requested `materialPerformance`
     * -->
     * @param  GetTagMetadataRequest     $body     Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createGetTagMetadata (
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/rest/tag/properties';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body), $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Unexpected error in API call. See HTTP response body for details.', 400);
        }

        else if ($response->code == 401) {
            throw new APIException('', 401);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Get a message to a single numeric tag code.
     * ### Idempotent Behaviour
     * This endpoint is idempotent and will respond with an appropriate HTTP status code to indicate the actual result
     * - **200 OK** message available
     * - **400 BAD_REQUEST** problem occurred, check message parameter for detailed information
     * - **401 UNAUTHORIZED** user not authorized
     * ### Input HTTP Headers:
     * - HTTP Basic Authorization (as specified above)
     * - Accept language (as specified above)
     * ### Input parameters:
     * - tagCode (required, number, `0`) ... Result code of a tag action
     * ### Output parameters:
     * - code (Number, `0`) ... Indicates the result code of this call (see `result codes`)
     * - message (string, `verified`) ... Result message in `Accept-Language` (see `Multi language support`)
     * @param  GetSingleTagCodeMessageRequest     $body     Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createGetSingleTagCodeMessage (
                $body) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/rest/tag/message';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($body), $this->basicAuthUserName, $this->basicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Unexpected error in API call. See HTTP response body for details.', 400);
        }

        else if ($response->code == 401) {
            throw new APIException('', 401);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
}